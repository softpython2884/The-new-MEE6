
import { Events, GuildMember } from 'discord.js';
import { giveTesterStatus, revokeTesterStatus } from '../../../src/lib/db';

const TARGET_GUILD_ID = '926602935054508032';

export const name = Events.GuildMemberUpdate;

export async function execute(oldMember: GuildMember, newMember: GuildMember) {
    // Only run for the target guild
    if (newMember.guild.id !== TARGET_GUILD_ID) {
        return;
    }

    const wasBoosting = oldMember.premiumSinceTimestamp !== null;
    const isBoosting = newMember.premiumSinceTimestamp !== null;

    // User started boosting
    if (!wasBoosting && isBoosting) {
        console.log(`[Tester] ${newMember.user.tag} a commenc√© √† booster ${newMember.guild.name}. Statut de Testeur accord√©.`);
        // Give tester status with no expiration date (tied to boost)
        giveTesterStatus(newMember.id, newMember.guild.id, null);
        
        try {
            await newMember.send('üéâ Merci d\'avoir boost√© le serveur ! En guise de remerciement, vous avez obtenu le statut de **Testeur**, vous donnant acc√®s √† des fonctionnalit√©s exclusives.');
        } catch (error) {
            console.warn(`[Tester] Impossible d'envoyer un DM de remerciement √† ${newMember.user.tag}.`);
        }
    } 
    // User stopped boosting
    else if (wasBoosting && !isBoosting) {
        console.log(`[Tester] ${newMember.user.tag} a arr√™t√© de booster ${newMember.guild.name}. Statut de Testeur r√©voqu√©.`);
        revokeTesterStatus(newMember.id, newMember.guild.id);
        
         try {
            await newMember.send('Vous avez arr√™t√© de booster le serveur. Votre statut de **Testeur** et l'acc√®s aux fonctionnalit√©s exclusives ont √©t√© retir√©s. Merci pour votre soutien pass√© !');
        } catch (error) {
            console.warn(`[Tester] Impossible d'envoyer un DM de notification √† ${newMember.user.tag}.`);
        }
    }
}
